Output: 
Inorder traversal of the BST:
jack jegan jeyanth john
preorder traversal of the BST:
john jack jegan jeyanth
postorder traversal of the BST:
jeyanth jegan jack john
Search jegan: Found
Inorder traversal after deleting jegan:
jack jegan john
Total nodes in BST: 3
Coding: 
class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None

class BST:
    def __init__(self):
        self.root = None

    # Insert a new key
    def insert(self, root, key):
        if root is None:
            return Node(key)
        if key < root.key:
            root.left = self.insert(root.left, key)
        else:
            root.right = self.insert(root.right, key)
        return root

    # Search a key in BST
    def search(self, root, key):
        if root is None or root.key == key:
            return root
        if key < root.key:
            return self.search(root.left, key)
        else:
            return self.search(root.right, key)

    # Find minimum node (used in deletion)
    def minValueNode(self, node):
        current = node
        while current.left:
            current = current.left
        return current

    # Delete a key
    def delete(self, root, key):
        if root is None:
            return root

        if key < root.key:
            root.left = self.delete(root.left, key)
        elif key > root.key:
            root.right = self.delete(root.right, key)
        else:
            # Node with one or no child
            if root.left is None:
                return root.right
            elif root.right is None:
                return root.left
           
            # Node with two children: get inorder successor (smallest in right subtree)
            temp = self.minValueNode(root.right)
            root.key = temp.key
            root.right = self.delete(root.right, temp.key)
       
        return root

    def inorder(self, root):
        if root:
            self.inorder(root.left)
            print(root.key, end=' ')
            self.inorder(root.right)
    def preorder(self, root):
        if root:
            print(root.key, end=' ')
            self.preorder(root.left)
            self.preorder(root.right)
    def postorder(self, root):
        if root:
            self.postorder(root.left)
            self.postorder(root.right)
            print(root.key, end=' ')
           
           


    # Count total nodes
    def countNodes(self, root):
        if root is None:
            return 0
        return 1 + self.countNodes(root.left) + self.countNodes(root.right)
   

bst = BST()
root = None

# Insert nodes
for key in ["john", "jack", "jegan", "jeyanth"]:
    root = bst.insert(root, key)

print("Inorder traversal of the BST:")
bst.inorder(root)
print()
print("preorder traversal of the BST:")
bst.preorder(root)
print()
print("postorder traversal of the BST:")
bst.postorder(root)
print()

# Search for a key
key = "jegan"
found = bst.search(root, key)
print(f"Search {key}: {'Found' if found else 'Not Found'}")

# Delete a key
root = bst.delete(root, "jeyanth")
print(f"Inorder traversal after deleting {key}:")
bst.inorder(root)
print()

# Count total nodes
total_nodes = bst.countNodes(root)
print(f"Total nodes in BST: {total_nodes}")AVL
